plugins {
	id 'java' // Java 플러그인 적용
	id 'org.springframework.boot' version '3.0.13' // Spring Boot 플러그인
	id 'io.spring.dependency-management' version '1.1.4' // 의존성 버전 자동 관리
}

group = 'com.itschool' // 그룹 ID
version = '0.0.1-SNAPSHOT' // 버전 정보

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17) // Java 17 사용
	}
}

repositories {
	mavenCentral() // Maven Central 저장소 사용
}

dependencies {
	// Spring Data JPA 의존성 (ORM 및 DB 접근을 위한 JPA 지원)
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Spring Web 의존성 (REST API 등 웹 기능 지원)
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// PostgreSQL JDBC 드라이버 (버전 생략: Spring Boot BOM이 자동으로 관리)
	implementation 'org.postgresql:postgresql'

	// Servlet API 의존성 추가 (HttpServletRequest 사용을 위해 필요)
	implementation 'javax.servlet:javax.servlet-api:4.0.1'

	// DTO 유효성 검사(@Valid, @NotBlank 등)를 사용할 수 있도록 지원
	implementation 'org.springframework.boot:spring-boot-starter-validation'


	implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.0.4'

	// 개발 및 테스트용 인메모리 DB (H2)
	runtimeOnly 'com.h2database:h2'

	// Lombok (코드 자동 생성 도구: getter/setter 등)
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// API 문서 자동화
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	// 테스트 관련 의존성
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Spring Boot DevTools는 개발 편의성을 높이기 위해 제공되는 도구. 자동 재시작, 라이브 리로드, 설정 간소화
	developmentOnly "org.springframework.boot:spring-boot-devtools"

	// Thymeleaf : 서버 사이드 렌더링
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	// Thymeleaf Layout : 레이아웃 재활용
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

	// security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	// 이메일 인증
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// web socket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
}

// 개발 환경에서만 필요한 라이브러리를 지정하는 사용자 정의 구성(Configuration)
// 즉, 개발 모드에서는 spring-boot-devtools를 사용할 수 있지만, 프로덕션 환경에서는 포함되지 않음
configurations {
	developmentOnly
	runtimeClasspath { // developmentOnly로 지정한 라이브러리를 런타임 클래스 경로에 추가
		extendsFrom developmentOnly
	}
}

tasks.named('test') {
	useJUnitPlatform() // JUnit 5 사용 설정
}

tasks.named('jar') {
	enabled = false
}